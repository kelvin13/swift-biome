@basis
let primitive:[Never] =
[
    Bool,
    BSON.Decimal128,
    String,
    BSON.Regex,
    BSON.Identifier,
    BSON.Millisecond,
    BSON.Tuple<Bytes>,
    BSON.Document<Bytes>,
    BSON.Binary<Bytes>,
]
@basis
let concrete:[Never] =
[
    Bool,
    BSON.Decimal128,
    String,
    BSON.Regex,
    BSON.Identifier,
    BSON.Millisecond,
    BSON.Tuple<Bytes>,
    BSON.Array<Bytes.SubSequence>,
    BSON.Document<Bytes>,
    BSON.Dictionary<Bytes.SubSequence>,
    BSON.Binary<Bytes>,
]

@basis
let generic:[Never] =
[
    Integer,
    Binary,
]
@basis
let conformance:[Never] =
[
    FixedWidthInteger,
    BinaryFloatingPoint,
]

@basis
let cases:[Never] =
[
    StringCoded,
    CharacterCoded,
    ScalarCoded,
]
@basis
let rawValues:[Never] =
[
    String,
    Character,
    Unicode.Scalar,
]
extension BSON.Value
{
    @matrix(__Primitive__: primitive)
    @inlinable public 
    func `as`(_:__Primitive__.Type) throws -> __Primitive__
    {
        try self.match(Self.as(_:))
    }
    @matrix(__Generic__: generic, __Conformance__: conformance)
    @inlinable public 
    func `as`<__Generic__>(_:__Generic__.Type) throws -> __Generic__
        where __Generic__:__Conformance__
    {
        try self.match(Self.as(_:))
    }
}
extension BSON.Value
{
    @matrix(__Primitive__: primitive)
    @inlinable public 
    func `as`(_:__Primitive__?.Type) throws -> __Primitive__?
    {
        try self.flatMatch(Self.as(_:))
    }
    @matrix(__Generic__: generic, __Conformance__: conformance)
    @inlinable public 
    func `as`<__Generic__>(_:__Generic__?.Type) throws -> __Generic__? 
        where __Generic__:__Conformance__
    {
        try self.flatMatch(Self.as(_:))
    }
    @matrix(__Cases__: cases, __RawValue__: rawValues)
    @inlinable public
    func `as`<__Cases__>(cases _:__Cases__?.Type = __Cases__?.self) throws -> __Cases__?
        where __Cases__:RawRepresentable, __Cases__.RawValue == __RawValue__
    {
        try self.flatMatch(Self.as(cases:))
    }
    @inlinable public
    func `as`<IntegerCoded>(cases _:IntegerCoded?.Type = IntegerCoded?.self) throws -> IntegerCoded?
        where IntegerCoded:RawRepresentable, IntegerCoded.RawValue:FixedWidthInteger
    {
        try self.flatMatch(Self.as(cases:))
    }
}

extension BSONDecoderField
{
    @matrix(__Primitive__: primitive)
    @inlinable public
    func decode(to _:__Primitive__.Type = __Primitive__.self) throws -> __Primitive__
    {
        try self.decode { try $0.as(__Primitive__.self) }
    }
    @matrix(__Generic__: generic, __Conformance__: conformance)
    @inlinable public
    func decode<__Generic__>(to _:__Generic__.Type = __Generic__.self) throws -> __Generic__
        where __Generic__:__Conformance__
    {
        try self.decode { try $0.as(__Generic__.self) }
    }
    @matrix(__Cases__: cases, __RawValue__: rawValues)
    @inlinable public
    func decode<__Cases__>(cases _:__Cases__.Type = __Cases__.self) throws -> __Cases__
        where __Cases__:RawRepresentable, __Cases__.RawValue == __RawValue__
    {
        try self.decode { try $0.as(cases: __Cases__.self) }
    }
    @inlinable public
    func decode<IntegerCoded>(cases _:IntegerCoded.Type = IntegerCoded.self) throws -> IntegerCoded
        where IntegerCoded:RawRepresentable, IntegerCoded.RawValue:FixedWidthInteger
    {
        try self.decode { try $0.as(cases: IntegerCoded.self) }
    }
}

extension BSONDecoderField
{
    @matrix(__Primitive__: primitive)
    @inlinable public
    func decode(to _:__Primitive__?.Type = __Primitive__?.self) throws -> __Primitive__?
    {
        try self.decode { try $0.as(__Primitive__?.self) }
    }
    @matrix(__Generic__: generic, __Conformance__: conformance)
    @inlinable public
    func decode<__Generic__>(to _:__Generic__?.Type = __Generic__?.self) throws -> __Generic__?
        where __Generic__:__Conformance__
    {
        try self.decode { try $0.as(__Generic__?.self) }
    }
    @matrix(__Cases__: cases, __RawValue__: rawValues)
    @inlinable public
    func decode<__Cases__>(cases _:__Cases__?.Type = __Cases__?.self) throws -> __Cases__?
        where __Cases__:RawRepresentable, __Cases__.RawValue == __RawValue__
    {
        try self.decode { try $0.as(cases: __Cases__?.self) }
    }
    @inlinable public
    func decode<IntegerCoded>(cases _:IntegerCoded?.Type = IntegerCoded?.self) throws -> IntegerCoded?
        where IntegerCoded:RawRepresentable, IntegerCoded.RawValue:FixedWidthInteger
    {
        try self.decode { try $0.as(cases: IntegerCoded?.self) }
    }
}

extension BSONDecoderField
{
    @matrix(__Concrete__: concrete)
    @inlinable public
    func decode<T>(as _:__Concrete__.Type,
        with decode:(__Concrete__) throws -> T) throws -> T
    {
        try self.decode { try decode(try $0.as(__Concrete__.self)) }
    }
    @matrix(__Generic__: generic, __Conformance__: conformance)
    @inlinable public
    func decode<__Generic__, T>(as _:__Generic__.Type,
        with decode:(__Generic__) throws -> T) throws -> T
        where __Generic__:__Conformance__
    {
        try self.decode { try decode(try $0.as(__Generic__.self)) }
    }
}

extension BSONDecoderField
{
    @matrix(__Concrete__: concrete)
    @inlinable public
    func decode<T>(as _:__Concrete__?.Type,
        with decode:(__Concrete__) throws -> T) throws -> T?
    {
        try self.decode { try $0.as(__Concrete__?.self).map(decode) }
    }
    @matrix(__Generic__: generic, __Conformance__: conformance)
    @inlinable public
    func decode<__Generic__, T>(as _:__Generic__?.Type,
        with decode:(__Generic__) throws -> T) throws -> T?
        where __Generic__:__Conformance__
    {
        try self.decode { try $0.as(__Generic__?.self).map(decode) }
    }
}
