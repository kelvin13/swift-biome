@basis
let concrete:[Never] =
[
    Bool,
    BSON.Decimal128,
    String,
    BSON.Regex,
    BSON.Identifier,
    BSON.Millisecond,
    BSON.Tuple<Bytes>,
    BSON.Array<Bytes.SubSequence>,
    BSON.Document<Bytes>,
    BSON.Dictionary<Bytes.SubSequence>,
]

@matrix(
    __Decoder__: [Array, Dictionary],
    __Key__: [Int, String], 
    __key__: [index, key])
@matrix(__Concrete__: concrete)
extension BSON.__Decoder__
{
    @inlinable public
    func decode<T>(_ __key__:__Key__,
        as _:__Concrete__.Type,
        with decode:(__Concrete__) throws -> T) throws -> T
    {
        try self.decode(__key__) { try decode(try $0.as(__Concrete__.self)) }
    }
    @inlinable public
    func decode<T>(_ __key__:__Key__,
        as _:__Concrete__?.Type,
        with decode:(__Concrete__) throws -> T) throws -> T?
    {
        try self.decode(__key__) { try $0.as(__Concrete__?.self).map(decode) }
    }
}

@matrix(__Concrete__: concrete)
extension BSON.Dictionary
{
    @inlinable public
    func decode<T>(mapping key:String,
        as _:__Concrete__.Type,
        with decode:(__Concrete__) throws -> T) throws -> T?
    {
        try self.decode(mapping: key) { try decode(try $0.as(__Concrete__.self)) }
    }
    @inlinable public
    func decode<T>(mapping key:String,
        as _:__Concrete__?.Type,
        with decode:(__Concrete__) throws -> T) throws -> T?
    {
        try self.decode(mapping: key) { try $0.as(__Concrete__?.self).map(decode) } ?? nil
    }
}
