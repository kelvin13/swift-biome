@basis
let generic:[Never] =
[
    Integer,
    Binary,
]
@basis
let conformance:[Never] =
[
    FixedWidthInteger,
    BinaryFloatingPoint,
]

@matrix(__Generic__: generic, __Conformance__: conformance)
extension BSON.Value
{
    @inlinable public 
    func `as`<__Generic__>(_:__Generic__.Type) throws -> __Generic__
        where __Generic__:__Conformance__
    {
        try self.match(Self.as(_:))
    }
    @inlinable public 
    func `as`<__Generic__>(_:__Generic__?.Type) throws -> __Generic__? 
        where __Generic__:__Conformance__
    {
        try self.flatMatch(Self.as(_:))
    }
}

@matrix(
    __Decoder__: [Array, Dictionary],
    __Key__: [Int, String], 
    __key__: [index, key])
@matrix(__Generic__: generic, __Conformance__: conformance)
extension BSON.__Decoder__
{
    @inlinable public
    func decode<__Generic__>(_ __key__:__Key__,
        as _:__Generic__.Type = __Generic__.self) throws -> __Generic__
        where __Generic__:__Conformance__
    {
        try self.decode(__key__) { try $0.as(__Generic__.self) }
    }
    @inlinable public
    func decode<__Generic__>(_ __key__:__Key__,
        as _:__Generic__?.Type = __Generic__?.self) throws -> __Generic__?
        where __Generic__:__Conformance__
    {
        try self.decode(__key__) { try $0.as(__Generic__?.self) }
    }
}

@matrix(__Generic__: generic, __Conformance__: conformance)
extension BSON.Dictionary
{
    @inlinable public
    func decode<__Generic__>(mapping key:String,
        as _:__Generic__.Type = __Generic__.self) throws -> __Generic__?
        where __Generic__:__Conformance__
    {
        try self.decode(mapping: key) { try $0.as(__Generic__.self) }
    }
    @inlinable public
    func decode<__Generic__>(mapping key:String,
        as _:__Generic__?.Type = __Generic__?.self) throws -> __Generic__?
        where __Generic__:__Conformance__
    {
        try self.decode(mapping: key) { try $0.as(__Generic__?.self) } ?? nil
    }
}

@matrix(
    __Decoder__: [Array, Dictionary],
    __Key__: [Int, String], 
    __key__: [index, key])
@matrix(__Generic__: generic, __Conformance__: conformance)
extension BSON.__Decoder__
{
    @inlinable public
    func decode<__Generic__, T>(_ __key__:__Key__,
        as _:__Generic__.Type,
        with decode:(__Generic__) throws -> T) throws -> T
        where __Generic__:__Conformance__
    {
        try self.decode(__key__) { try decode(try $0.as(__Generic__.self)) }
    }
    @inlinable public
    func decode<__Generic__, T>(_ __key__:__Key__,
        as _:__Generic__?.Type,
        with decode:(__Generic__) throws -> T) throws -> T?
        where __Generic__:__Conformance__
    {
        try self.decode(__key__) { try $0.as(__Generic__?.self).map(decode) }
    }
}

@matrix(__Generic__: generic, __Conformance__: conformance)
extension BSON.Dictionary
{
    @inlinable public
    func decode<__Generic__, T>(mapping key:String,
        as _:__Generic__.Type,
        with decode:(__Generic__) throws -> T) throws -> T?
        where __Generic__:__Conformance__
    {
        try self.decode(mapping: key) { try decode(try $0.as(__Generic__.self)) }
    }
    @inlinable public
    func decode<__Generic__, T>(mapping key:String,
        as _:__Generic__?.Type,
        with decode:(__Generic__) throws -> T) throws -> T?
        where __Generic__:__Conformance__
    {
        try self.decode(mapping: key) { try $0.as(__Generic__?.self).map(decode) } ?? nil
    }
}
